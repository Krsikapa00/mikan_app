{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Nicholas Krsikapa\\\\Desktop\\\\mikan_app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Nicholas Krsikapa\\\\Desktop\\\\mikan_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nicholas Krsikapa\\\\Desktop\\\\mikan_app\\\\src\\\\components\\\\Menu\\\\Adminlastpunch.js\";\nimport React from 'react';\nimport Singlepunch from '../Singlepunch';\n\nvar Adminlastpunch = function Adminlastpunch(_ref) {\n  var adminlist = _ref.adminlist;\n\n  function getAdminLastPunch(_x) {\n    return _getAdminLastPunch.apply(this, arguments);\n  }\n\n  function _getAdminLastPunch() {\n    _getAdminLastPunch = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(userarr) {\n      var promises, results;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              promises = userarr.map(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(data) {\n                  var response;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return fetch(\"http://localhost:3000/latestpunch\", {\n                            method: 'POST',\n                            headers: {\n                              'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                              id: data.id\n                            })\n                          }).then(function (resp) {\n                            return resp.json();\n                          }).catch(function (err) {\n                            return console.log(err);\n                          });\n\n                        case 2:\n                          response = _context.sent;\n\n                          if (!response.id) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          response['name'] = data.name;\n                          return _context.abrupt(\"return\", response);\n\n                        case 8:\n                          return _context.abrupt(\"return\", 'Did not work');\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              _context2.next = 3;\n              return Promise.all(promises);\n\n            case 3:\n              results = _context2.sent;\n              console.log(results);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getAdminLastPunch.apply(this, arguments);\n  }\n\n  if (adminlist[0]) {\n    getAdminLastPunch(adminlist);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  });\n};\n\nexport default Adminlastpunch;","map":{"version":3,"sources":["C:\\Users\\Nicholas Krsikapa\\Desktop\\mikan_app\\src\\components\\Menu\\Adminlastpunch.js"],"names":["React","Singlepunch","Adminlastpunch","adminlist","getAdminLastPunch","userarr","promises","map","data","fetch","method","headers","body","JSON","stringify","id","then","resp","json","catch","err","console","log","response","name","Promise","all","results"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAiB;AAAA,MAAfC,SAAe,QAAfA,SAAe;;AAAA,WAErBC,iBAFqB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6BAEpC,kBAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,cAAAA,QAFV,GAEqBD,OAAO,CAACE,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAY,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACFC,KAAK,sCAAsC;AAC9DC,4BAAAA,MAAM,EAAE,MADsD;AAE9DC,4BAAAA,OAAO,EAAE;AAAC,8CAAgB;AAAjB,6BAFqD;AAG9DC,4BAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,8BAAAA,EAAE,EAAEP,IAAI,CAACO;AADQ,6BAAf;AAHwD,2BAAtC,CAAL,CAMpBC,IANoB,CAMf,UAAAC,IAAI;AAAA,mCAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,2BANW,EAOtBC,KAPsB,CAOhB,UAAAC,GAAG;AAAA,mCAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,2BAPa,CADE;;AAAA;AACnBG,0BAAAA,QADmB;;AAAA,+BAWrBA,QAAQ,CAACR,EAXY;AAAA;AAAA;AAAA;;AAYzBQ,0BAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmBf,IAAI,CAACgB,IAAxB;AAZyB,2DAalBD,QAbkB;;AAAA;AAAA,2DAeb,cAfa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBAFrB;AAAA;AAAA,qBAqB0BE,OAAO,CAACC,GAAR,CAAYpB,QAAZ,CArB1B;;AAAA;AAqBUqB,cAAAA,OArBV;AAsBIN,cAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFoC;AAAA;AAAA;;AA2BpC,MAAIxB,SAAS,CAAC,CAAD,CAAb,EAAiB;AACbC,IAAAA,iBAAiB,CAACD,SAAD,CAAjB;AACH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAlCD;;AAoCA,eAAeD,cAAf","sourcesContent":["import React from 'react';\r\nimport Singlepunch from '../Singlepunch';\r\n\r\nconst Adminlastpunch = ({adminlist}) => {\r\n\r\n    async function getAdminLastPunch (userarr) {\r\n        \r\n        const promises = userarr.map(async data => {\r\n            const response = await fetch(`http://localhost:3000/latestpunch`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    id: data.id,\r\n                })\r\n            }).then(resp => resp.json())\r\n            .catch(err => console.log(err))\r\n\r\n\r\n            if (response.id){\r\n            response['name'] = data.name;\r\n            return response\r\n            } else {\r\n                return ('Did not work')\r\n            }\r\n        }) \r\n        \r\n        const results = await Promise.all(promises);\r\n        console.log(results)\r\n    }\r\n\r\n    if (adminlist[0]){\r\n        getAdminLastPunch(adminlist);\r\n    }\r\n\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default Adminlastpunch;"]},"metadata":{},"sourceType":"module"}